--- a/net/minecraft/server/TileEntityFurnace.java
+++ b/net/minecraft/server/TileEntityFurnace.java
@@ -9,6 +9,16 @@
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+// CraftBukkit end
 
 public abstract class TileEntityFurnace extends TileEntityContainer implements IWorldInventory, RecipeHolder, AutoRecipeOutput {
 
@@ -137,6 +147,36 @@
         return map;
     }
 
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     private static boolean b(Item item) {
         return TagsItem.NON_FLAMMABLE_WOOD.isTagged(item);
     }
@@ -221,13 +261,24 @@
                 tileentityfurnace.cookTime = MathHelper.clamp(tileentityfurnace.cookTime - 2, 0, tileentityfurnace.cookTimeTotal);
             }
         } else {
-            IRecipe<?> irecipe = (IRecipe) world.getCraftingManager().craft(tileentityfurnace.n, tileentityfurnace, world).orElse((Object) null);
+            IRecipe<?> irecipe = (IRecipe) world.getCraftingManager().craft(tileentityfurnace.n, tileentityfurnace, world).orElse(null); // CraftBukkit - decompile error
             int i = tileentityfurnace.getMaxStackSize();
 
             if (!tileentityfurnace.isBurning() && canBurn(irecipe, tileentityfurnace.items, i)) {
-                tileentityfurnace.burnTime = tileentityfurnace.fuelTime(itemstack);
+                // CraftBukkit start
+                CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(tileentityfurnace.world, tileentityfurnace.position), fuel, tileentityfurnace.fuelTime(itemstack));
+                tileentityfurnace.world.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled()) {
+                    return;
+                }
+
+                tileentityfurnace.burnTime = furnaceBurnEvent.getBurnTime();
                 tileentityfurnace.ticksForCurrentFuel = tileentityfurnace.burnTime;
-                if (tileentityfurnace.isBurning()) {
+                if (tileentityfurnace.isBurning() && furnaceBurnEvent.isBurning()) {
+                    // CraftBukkit end
                     flag1 = true;
                     if (!itemstack.isEmpty()) {
                         Item item = itemstack.getItem();
@@ -247,7 +298,7 @@
                 if (tileentityfurnace.cookTime == tileentityfurnace.cookTimeTotal) {
                     tileentityfurnace.cookTime = 0;
                     tileentityfurnace.cookTimeTotal = getRecipeCookingTime(world, tileentityfurnace.n, tileentityfurnace);
-                    if (burn(irecipe, tileentityfurnace.items, i)) {
+                    if (burn(irecipe, tileentityfurnace.items, i, tileentityfurnace)) { // CraftBukkit
                         tileentityfurnace.a(irecipe);
                     }
 
@@ -286,17 +337,44 @@
         }
     }
 
-    private static boolean burn(@Nullable IRecipe<?> irecipe, NonNullList<ItemStack> nonnulllist, int i) {
+    private static boolean burn(@Nullable IRecipe<?> irecipe, NonNullList<ItemStack> nonnulllist, int i, TileEntityFurnace tileentityfurnace) { // CraftBukkit
         if (irecipe != null && canBurn(irecipe, nonnulllist, i)) {
             ItemStack itemstack = (ItemStack) nonnulllist.get(0);
             ItemStack itemstack1 = irecipe.getResult();
             ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(tileentityfurnace.world.getWorld().getBlockAt(tileentityfurnace.position.getX(), tileentityfurnace.position.getY(), tileentityfurnace.position.getZ()), source, result);
+            tileentityfurnace.world.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return false;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    tileentityfurnace.items.set(2, itemstack1.cloneItemStack());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.add(itemstack1.getCount());
+                } else {
+                    return false;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty()) {
                 nonnulllist.set(2, itemstack1.cloneItemStack());
             } else if (itemstack2.a(itemstack1.getItem())) {
                 itemstack2.add(1);
             }
+            */
+            // CraftBukkit end
 
             if (itemstack.a(Blocks.WET_SPONGE.getItem()) && !((ItemStack) nonnulllist.get(1)).isEmpty() && ((ItemStack) nonnulllist.get(1)).a(Items.BUCKET)) {
                 nonnulllist.set(1, new ItemStack(Items.WATER_BUCKET));
@@ -319,8 +397,8 @@
         }
     }
 
-    private static int getRecipeCookingTime(World world, Recipes<? extends RecipeCooking> recipes, IInventory iinventory) {
-        return (Integer) world.getCraftingManager().craft(recipes, iinventory, world).map(RecipeCooking::getCookingTime).orElse(200);
+    private static int getRecipeCookingTime(@Nullable World world, Recipes<? extends RecipeCooking> recipes, IInventory iinventory) {
+        return world != null ? (Integer) world.getCraftingManager().craft(recipes, iinventory, world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
     }
 
     public static boolean isFuel(ItemStack itemstack) {
@@ -439,30 +517,36 @@
     @Override
     public void b(EntityHuman entityhuman) {}
 
-    public void a(EntityPlayer entityplayer) {
-        List<IRecipe<?>> list = this.a(entityplayer.getWorldServer(), entityplayer.getPositionVector());
+    public void a(EntityHuman entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
+        List<IRecipe<?>> list = this.a(entityhuman.world, entityhuman.getPositionVector(), entityhuman, itemstack, amount); // CraftBukkit
 
-        entityplayer.discoverRecipes(list);
+        entityhuman.discoverRecipes(list);
         this.m.clear();
     }
 
     public List<IRecipe<?>> a(WorldServer worldserver, Vec3D vec3d) {
+        // CraftBukkit start
+        return this.a(world, vec3d, null, null, 0);
+    }
+
+    public List<IRecipe<?>> a(World world, Vec3D vec3d, EntityHuman entityhuman, ItemStack itemstack, int amount) {
+        // CraftBukkit end
         List<IRecipe<?>> list = Lists.newArrayList();
         ObjectIterator objectiterator = this.m.object2IntEntrySet().iterator();
 
         while (objectiterator.hasNext()) {
             Entry<MinecraftKey> entry = (Entry) objectiterator.next();
 
-            worldserver.getCraftingManager().getRecipe((MinecraftKey) entry.getKey()).ifPresent((irecipe) -> {
+            entityhuman.getWorld().getCraftingManager().getRecipe((MinecraftKey) entry.getKey()).ifPresent((irecipe) -> {
                 list.add(irecipe);
-                a(worldserver, vec3d, entry.getIntValue(), ((RecipeCooking) irecipe).getExperience());
+                a(world, vec3d, entry.getIntValue(), ((RecipeCooking) irecipe).getExperience(), entityhuman, itemstack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void a(WorldServer worldserver, Vec3D vec3d, int i, float f) {
+    private void a(World world, Vec3D vec3d, int i, float f, EntityHuman entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
         int j = MathHelper.d((float) i * f);
         float f1 = MathHelper.h((float) i * f);
 
@@ -470,7 +554,14 @@
             ++j;
         }
 
-        EntityExperienceOrb.a(worldserver, vec3d, j);
+        // CraftBukkit start - fire FurnaceExtractEvent
+        if (amount != 0) {
+            FurnaceExtractEvent event = new FurnaceExtractEvent((Player) entityhuman.getBukkitEntity(), CraftBlock.at(world, position), org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), amount, j);
+            world.getServer().getPluginManager().callEvent(event);
+            j = event.getExpToDrop();
+        }
+        // CraftBukkit end
+        EntityExperienceOrb.a((WorldServer) entityhuman.getWorld(), vec3d, j);
     }
 
     @Override
