--- a/net/minecraft/server/PlayerChunkMap.java
+++ b/net/minecraft/server/PlayerChunkMap.java
@@ -43,6 +43,7 @@
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.entity.Player; // CraftBukkit
 
 public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
@@ -75,6 +76,31 @@
     private final Queue<Runnable> unloadQueueTasks;
     private int viewDistance;
 
+    // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
+    public final CallbackExecutor callbackExecutor = new CallbackExecutor();
+    public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
+
+        private Runnable queued;
+
+        @Override
+        public void execute(Runnable runnable) {
+            if (queued != null) {
+                throw new IllegalStateException("Already queued");
+            }
+            queued = runnable;
+        }
+
+        @Override
+        public void run() {
+            Runnable task = queued;
+            queued = null;
+            if (task != null) {
+                task.run();
+            }
+        }
+    };
+    // CraftBukkit end
+
     public PlayerChunkMap(WorldServer worldserver, Convertable.ConversionSession convertable_conversionsession, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, IAsyncTaskHandler<Runnable> iasynctaskhandler, ILightAccess ilightaccess, ChunkGenerator chunkgenerator, WorldLoadListener worldloadlistener, ChunkStatusUpdateListener chunkstatusupdatelistener, Supplier<WorldPersistentData> supplier, int i, boolean flag) {
         super(new File(convertable_conversionsession.a(worldserver.getDimensionKey()), "region"), datafixer, flag);
         this.visibleChunks = this.updatingChunks.clone();
@@ -196,9 +222,12 @@
 
         return completablefuture1.thenApply((list1) -> {
             List<IChunkAccess> list2 = Lists.newArrayList();
-            final int l1 = 0;
+            // CraftBukkit start - decompile error
+            int cnt = 0;
 
-            for (Iterator iterator = list1.iterator(); iterator.hasNext(); ++l1) {
+            for (Iterator iterator = list1.iterator(); iterator.hasNext(); ++cnt) {
+                final int l1 = cnt;
+                // CraftBukkit end
                 final Either<IChunkAccess, PlayerChunk.Failure> either = (Either) iterator.next();
                 Optional<IChunkAccess> optional = either.left();
 
@@ -301,7 +330,7 @@
             PlayerChunkMap.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", this.x.getName());
         } else {
             this.visibleChunks.values().stream().filter(PlayerChunk::hasBeenLoaded).forEach((playerchunk) -> {
-                IChunkAccess ichunkaccess = (IChunkAccess) playerchunk.getChunkSave().getNow((Object) null);
+                IChunkAccess ichunkaccess = (IChunkAccess) playerchunk.getChunkSave().getNow(null); // CraftBukkit - decompile error
 
                 if (ichunkaccess instanceof ProtoChunkExtension || ichunkaccess instanceof Chunk) {
                     this.saveChunk(ichunkaccess);
@@ -312,7 +341,6 @@
         }
 
     }
-
     protected void unloadChunks(BooleanSupplier booleansupplier) {
         GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
@@ -351,7 +379,7 @@
 
     private void a(long i, PlayerChunk playerchunk) {
         CompletableFuture<IChunkAccess> completablefuture = playerchunk.getChunkSave();
-        Consumer consumer = (ichunkaccess) -> {
+        Consumer<IChunkAccess> consumer = (ichunkaccess) -> { // CraftBukkit - decompile error
             CompletableFuture<IChunkAccess> completablefuture1 = playerchunk.getChunkSave();
 
             if (completablefuture1 != completablefuture) {
@@ -762,7 +790,8 @@
                 return ichunkaccess instanceof Chunk ? Optional.of((Chunk) ichunkaccess) : Optional.empty();
             });
 
-            csvwriter.a(chunkcoordintpair.x, chunkcoordintpair.z, playerchunk.getTicketLevel(), optional.isPresent(), optional.map(IChunkAccess::getChunkStatus).orElse((Object) null), optional1.map(Chunk::getState).orElse((Object) null), a(playerchunk.c()), a(playerchunk.a()), a(playerchunk.b()), this.chunkDistanceManager.c(entry.getLongKey()), !this.isOutsideOfRange(chunkcoordintpair), optional1.map((chunk) -> {
+            // CraftBukkit - decompile error
+            csvwriter.a(chunkcoordintpair.x, chunkcoordintpair.z, playerchunk.getTicketLevel(), optional.isPresent(), optional.map(IChunkAccess::getChunkStatus).orElse(null), optional1.map(Chunk::getState).orElse(null), a(playerchunk.c()), a(playerchunk.a()), a(playerchunk.b()), this.chunkDistanceManager.c(entry.getLongKey()), !this.isOutsideOfRange(chunkcoordintpair), optional1.map((chunk) -> {
                 return chunk.getTileEntities().size();
             }).orElse(0));
         }
@@ -771,7 +800,7 @@
 
     private static String a(CompletableFuture<Either<Chunk, PlayerChunk.Failure>> completablefuture) {
         try {
-            Either<Chunk, PlayerChunk.Failure> either = (Either) completablefuture.getNow((Object) null);
+            Either<Chunk, PlayerChunk.Failure> either = (Either) completablefuture.getNow(null); // CraftBukkit - decompile error
 
             return either != null ? (String) either.map((chunk) -> {
                 return "done";
@@ -789,7 +818,7 @@
     private NBTTagCompound readChunkData(ChunkCoordIntPair chunkcoordintpair) throws IOException {
         NBTTagCompound nbttagcompound = this.read(chunkcoordintpair);
 
-        return nbttagcompound == null ? null : this.getChunkData(this.world.getDimensionKey(), this.l, nbttagcompound);
+        return nbttagcompound == null ? null : this.getChunkData(this.world.getTypeKey(), this.l, nbttagcompound, chunkcoordintpair, world); // CraftBukkit
     }
 
     boolean isOutsideOfRange(ChunkCoordIntPair chunkcoordintpair) {
@@ -1125,12 +1154,20 @@
         public final Set<EntityPlayerHolder> trackedPlayers = Sets.newIdentityHashSet();
 
         public EntityTracker(Entity entity, int i, int j, boolean flag) {
-            this.trackerEntry = new EntityTrackerEntry(PlayerChunkMap.this.world, entity, j, flag, this::broadcast);
+            this.trackerEntry = new EntityTrackerEntry(PlayerChunkMap.this.world, entity, j, flag, this::broadcast, getTrackedEntityPlayers()); // CraftBukkit
             this.tracker = entity;
             this.trackingDistance = i;
             this.e = SectionPosition.a(entity);
         }
 
+        // CraftBukkit start
+        public Set<EntityPlayer> getTrackedEntityPlayers() {
+            Set<EntityPlayer> set = Sets.newIdentityHashSet();
+            trackedPlayers.forEach(holder -> set.add(holder.getEntityPlayer()));
+            return set;
+        }
+        // CraftBukkit end
+
         public boolean equals(Object object) {
             return object instanceof PlayerChunkMap.EntityTracker ? ((PlayerChunkMap.EntityTracker) object).tracker.getId() == this.tracker.getId() : false;
         }
@@ -1178,10 +1215,20 @@
 
         public void updatePlayer(EntityPlayer entityplayer) {
             if (entityplayer != this.tracker) {
-                Vec3D vec3d = entityplayer.getPositionVector().d(this.trackerEntry.b());
+                Vec3D vec3d = entityplayer.getPositionVector().d(this.tracker.getPositionVector()); // MC-155077, SPIGOT-5113
                 int i = Math.min(this.b(), (PlayerChunkMap.this.viewDistance - 1) * 16);
                 boolean flag = vec3d.x >= (double) (-i) && vec3d.x <= (double) i && vec3d.z >= (double) (-i) && vec3d.z <= (double) i && this.tracker.a(entityplayer);
 
+                // CraftBukkit start - respect vanish API
+                if (this.tracker instanceof EntityPlayer) {
+                    Player player = ((EntityPlayer) this.tracker).getBukkitEntity();
+                    if (!entityplayer.getBukkitEntity().canSee(player)) {
+                        flag = false;
+                    }
+                }
+
+                entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
+                // CraftBukkit end
                 if (flag) {
                     if (this.trackedPlayers.add(entityplayer.playerConnection)) {
                         this.trackerEntry.b(entityplayer);
