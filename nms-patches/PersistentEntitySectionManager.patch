--- a/net/minecraft/server/PersistentEntitySectionManager.java
+++ b/net/minecraft/server/PersistentEntitySectionManager.java
@@ -23,6 +23,8 @@
 import java.util.stream.Stream;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
 
@@ -68,13 +70,22 @@
     }
 
     private boolean a(T t0, boolean flag) {
+        // CraftBukkit start
+        return a(t0, flag, CreatureSpawnEvent.SpawnReason.DEFAULT, null);
+    }
+
+    public boolean a(T t0, boolean flag, CreatureSpawnEvent.SpawnReason spawnReason, WorldServer world) {
         if (!this.b(t0)) {
             return false;
         } else {
+            if (t0 instanceof Entity && world != null && !CraftEventFactory.doEntityAddEventCalling(world, (Entity) t0, spawnReason)) {
+                return false;
+            }
+            // CraftBukkit end
             long i = EntitySectionStorage.a(t0.getChunkCoordinates());
             EntitySection<T> entitysection = this.f.c(i);
 
-            entitysection.a((Object) t0);
+            entitysection.a(t0); // CraftBukkit - decompile error
             t0.a(new PersistentEntitySectionManager.a(t0, i, entitysection));
             if (!flag) {
                 this.worldCallback.f(t0);
@@ -246,7 +257,7 @@
     }
 
     private void g() {
-        this.j.removeIf((i) -> {
+        this.j.removeIf((java.util.function.LongPredicate) (i) -> { // CraftBukkit - decompile error
             return this.h.get(i) != Visibility.a ? true : this.c(i);
         });
     }
@@ -256,7 +267,7 @@
 
         while ((chunkentities = (ChunkEntities) this.k.poll()) != null) {
             chunkentities.b().forEach((entityaccess) -> {
-                this.a(entityaccess, true);
+                this.a((T) entityaccess, true); // CraftBukkit - decompile error
             });
             this.i.put(chunkentities.a().pair(), PersistentEntitySectionManager.b.c);
         }
@@ -284,7 +295,7 @@
     }
 
     public void b() {
-        this.i().forEach((i) -> {
+        this.i().forEach((java.util.function.LongConsumer) (i) -> { // CraftBukkit - decompile error
             boolean flag = this.h.get(i) == Visibility.a;
 
             if (flag) {
@@ -303,7 +314,7 @@
         while (!longset.isEmpty()) {
             this.entityPersistentStorage.a();
             this.h();
-            longset.removeIf((i) -> {
+            longset.removeIf((java.util.function.LongPredicate) (i) -> { // CraftBukkit - decompile error
                 boolean flag = this.h.get(i) == Visibility.a;
 
                 return flag ? this.c(i) : this.a(i, (entityaccess) -> {
@@ -329,7 +340,7 @@
     public void a(Writer writer) throws IOException {
         CSVWriter csvwriter = CSVWriter.a().a("x").a("y").a("z").a("visibility").a("load_status").a("entity_count").a(writer);
 
-        this.f.a().forEach((i) -> {
+        this.f.a().forEach((java.util.function.LongConsumer) (i) -> { // CraftBukkit - decompile error
             PersistentEntitySectionManager.b persistententitysectionmanager_b = (PersistentEntitySectionManager.b) this.i.get(i);
 
             this.f.a(i).forEach((j) -> {
@@ -358,7 +369,7 @@
         private EntitySection<T> e;
 
         private a(EntityAccess entityaccess, long i, EntitySection entitysection) {
-            this.c = entityaccess;
+            this.c = (T) entityaccess; // CraftBukkit - decompile error
             this.d = i;
             this.e = entitysection;
         }
@@ -378,7 +389,7 @@
                 PersistentEntitySectionManager.this.a(this.d, this.e);
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.f.c(i);
 
-                entitysection.a((Object) this.c);
+                entitysection.a( this.c); // CraftBukkit - decompile error
                 this.e = entitysection;
                 this.d = i;
                 this.a(visibility, entitysection.c());
