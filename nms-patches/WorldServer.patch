--- a/net/minecraft/server/WorldServer.java
+++ b/net/minecraft/server/WorldServer.java
@@ -35,6 +35,18 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.WorldUUID;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.server.MapInitializeEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import org.bukkit.event.world.TimeSkipEvent;
+// CraftBukkit end
+
 public class WorldServer extends World implements GeneratorAccessSeed {
 
     public static final BlockPosition a = new BlockPosition(100, 50, 0);
@@ -42,7 +54,7 @@
     private final List<EntityPlayer> players = Lists.newArrayList();
     private final ChunkProviderServer chunkProvider;
     private final MinecraftServer server;
-    public final IWorldDataServer worldDataServer;
+    public final WorldDataServer worldDataServer; // CraftBukkit - type
     private final EntityTickList x = new EntityTickList();
     private final PersistentEntitySectionManager<Entity> y;
     public boolean tickingEntities;
@@ -62,8 +74,23 @@
     private final StructureManager structureManager;
     private final boolean L;
 
-    public WorldServer(MinecraftServer minecraftserver, Executor executor, Convertable.ConversionSession convertable_conversionsession, IWorldDataServer iworlddataserver, ResourceKey<World> resourcekey, DimensionManager dimensionmanager, WorldLoadListener worldloadlistener, ChunkGenerator chunkgenerator, boolean flag, long i, List<MobSpawner> list, boolean flag1) {
-        super(iworlddataserver, resourcekey, dimensionmanager, minecraftserver::getMethodProfiler, false, flag, i);
+
+    // CraftBukkit start
+    private int tickPosition;
+    public final Convertable.ConversionSession convertable;
+    public final UUID uuid;
+
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return this.chunkProvider.getChunkAt(x, z, false);
+    }
+
+    // Add env and gen to constructor, WorldData -> WorldDataServer
+    public WorldServer(MinecraftServer minecraftserver, Executor executor, Convertable.ConversionSession convertable_conversionsession, IWorldDataServer iworlddataserver, ResourceKey<World> resourcekey, DimensionManager dimensionmanager, WorldLoadListener worldloadlistener, ChunkGenerator chunkgenerator, boolean flag, long i, List<MobSpawner> list, boolean flag1, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
+        super(iworlddataserver, resourcekey, dimensionmanager, minecraftserver::getMethodProfiler, false, flag, i, gen, env);
+        this.pvpMode = minecraftserver.getPVP();
+        convertable = convertable_conversionsession;
+        uuid = WorldUUID.getUUID(convertable_conversionsession.folder.toFile());
+        // CraftBukkit end
         this.nextTickListBlock = new TickListServer<>(this, (block) -> {
             return block == null || block.getBlockData().isAir();
         }, IRegistry.BLOCK::getKey, this::b);
@@ -76,7 +103,14 @@
         this.L = flag1;
         this.server = minecraftserver;
         this.mobSpawners = list;
-        this.worldDataServer = iworlddataserver;
+        // CraftBukkit start
+        this.worldDataServer = (WorldDataServer) iworlddataserver;
+        worldDataServer.world = this;
+        if (gen != null) {
+            chunkgenerator = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, chunkgenerator, gen);
+        }
+        // CraftBukkit end
+
         boolean flag2 = minecraftserver.isSyncChunkWrites();
         DataFixer datafixer = minecraftserver.getDataFixer();
         EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, new File(convertable_conversionsession.a(resourcekey), "entities"), datafixer, flag2, minecraftserver);
@@ -103,14 +137,48 @@
             iworlddataserver.setGameType(minecraftserver.getGamemode());
         }
 
-        this.structureManager = new StructureManager(this, minecraftserver.getSaveData().getGeneratorSettings());
+        this.structureManager = new StructureManager(this, this.worldDataServer.getGeneratorSettings()); // CraftBukkit
         if (this.getDimensionManager().isCreateDragonBattle()) {
-            this.dragonBattle = new EnderDragonBattle(this, minecraftserver.getSaveData().getGeneratorSettings().getSeed(), minecraftserver.getSaveData().C());
+            this.dragonBattle = new EnderDragonBattle(this, this.worldDataServer.getGeneratorSettings().getSeed(), this.worldDataServer.C()); // CraftBukkit
         } else {
             this.dragonBattle = null;
         }
+        this.getServer().addWorld(this.getWorld()); // CraftBukkit
+    }
+
+    // CraftBukkit start
+    @Override
+    protected TileEntity getTileEntity(BlockPosition pos, boolean validate) {
+        TileEntity result = super.getTileEntity(pos, validate);
+        if (!validate || Thread.currentThread() != this.serverThread) {
+            // SPIGOT-5378: avoid deadlock, this can be called in loading logic (i.e lighting) but getType() will block on chunk load
+            return result;
+        }
+        Block type = getType(pos).getBlock();
 
+        if (result != null && type != Blocks.AIR) {
+            if (!result.getTileType().isValidBlock(type.getBlockData())) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+
+        return result;
+    }
+
+    private TileEntity fixTileEntity(BlockPosition pos, Block type, TileEntity found) {
+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0}, {1}, {2} is {3} but has {4}" + ". "
+                + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.getX(), pos.getY(), pos.getZ(), type, found});
+
+        if (type instanceof ITileEntity) {
+            TileEntity replacement = ((ITileEntity) type).createTile(pos, type.getBlockData());
+            replacement.world = this;
+            this.setTileEntity(pos, replacement);
+            return replacement;
+        } else {
+            return found;
+        }
     }
+    // CraftBukkit end
 
     public void a(int i, int j, boolean flag, boolean flag1) {
         this.worldDataServer.a(i);
@@ -201,6 +269,7 @@
             this.rainLevel = MathHelper.a(this.rainLevel, 0.0F, 1.0F);
         }
 
+        /* CraftBukkit start
         if (this.lastRainLevel != this.rainLevel) {
             this.server.getPlayerList().a((Packet) (new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.h, this.rainLevel)), this.getDimensionKey());
         }
@@ -219,18 +288,47 @@
             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.h, this.rainLevel));
             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.i, this.thunderLevel));
         }
+        // */
+        for (int idx = 0; idx < this.players.size(); ++idx) {
+            if (((EntityPlayer) this.players.get(idx)).world == this) {
+                ((EntityPlayer) this.players.get(idx)).tickWeather();
+            }
+        }
+
+        if (flag != this.isRaining()) {
+            // Only send weather packets to those affected
+            for (int idx = 0; idx < this.players.size(); ++idx) {
+                if (((EntityPlayer) this.players.get(idx)).world == this) {
+                    ((EntityPlayer) this.players.get(idx)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                }
+            }
+        }
+        for (int idx = 0; idx < this.players.size(); ++idx) {
+            if (((EntityPlayer) this.players.get(idx)).world == this) {
+                ((EntityPlayer) this.players.get(idx)).updateWeather(this.lastRainLevel, this.rainLevel, this.lastThunderLevel, this.thunderLevel);
+            }
+        }
+        // CraftBukkit end
 
         if (this.everyoneSleeping && this.players.stream().noneMatch((entityplayer) -> {
-            return !entityplayer.isSpectator() && !entityplayer.isDeeplySleeping();
+            return !entityplayer.isSpectator() && !entityplayer.isDeeplySleeping() && !entityplayer.fauxSleeping; // CraftBukkit
         })) {
-            this.everyoneSleeping = false;
+            // CraftBukkit start
+            long l = this.worldData.getDayTime() + 24000L;
+            TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (l - l % 24000L) - this.getDayTime());
             if (this.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)) {
-                long l = this.worldData.getDayTime() + 24000L;
+                getServer().getPluginManager().callEvent(event);
+                if (!event.isCancelled()) {
+                    this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                }
 
-                this.setDayTime(l - l % 24000L);
             }
 
-            this.wakeupPlayers();
+            if (!event.isCancelled()) {
+                this.everyoneSleeping = false;
+                this.wakeupPlayers();
+            }
+            // CraftBukkit end
             if (this.getGameRules().getBoolean(GameRules.DO_WEATHER_CYCLE)) {
                 this.clearWeather();
             }
@@ -252,7 +350,7 @@
         this.ao();
         this.ticking = false;
         gameprofilerfiller.exit();
-        boolean flag3 = !this.players.isEmpty() || !this.getForceLoadedChunks().isEmpty();
+        boolean flag3 = true || !this.players.isEmpty() || !this.getForceLoadedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
 
         if (flag3) {
             this.resetEmptyTime();
@@ -332,7 +430,7 @@
     }
 
     private void wakeupPlayers() {
-        ((List) this.players.stream().filter(EntityLiving::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> {
+        (this.players.stream().filter(EntityLiving::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> { // CraftBukkit - decompile error
             entityplayer.wakeup(false, false);
         });
     }
@@ -359,14 +457,15 @@
                     entityhorseskeleton.t(true);
                     entityhorseskeleton.setAgeRaw(0);
                     entityhorseskeleton.setPosition((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
-                    this.addFreshEntity(entityhorseskeleton);
+                    this.addEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
                 }
+                // CraftBukkit end */
 
                 EntityLightning entitylightning = (EntityLightning) EntityTypes.LIGHTNING_BOLT.a((World) this);
 
                 entitylightning.d(Vec3D.c((BaseBlockPosition) blockposition));
                 entitylightning.setEffect(flag1);
-                this.addFreshEntity(entitylightning);
+                this.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.WEATHER); // CraftBukkit
             }
         }
 
@@ -377,12 +476,12 @@
             BiomeBase biomebase = this.w(blockposition);
 
             if (biomebase.a(this, blockposition1)) {
-                this.setTypeUpdate(blockposition1, Blocks.ICE.getBlockData());
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition1, Blocks.ICE.getBlockData(), null); // CraftBukkit
             }
 
             if (flag) {
                 if (biomebase.b(this, blockposition)) {
-                    this.setTypeUpdate(blockposition, Blocks.SNOW.getBlockData());
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, Blocks.SNOW.getBlockData(), null); // CraftBukkit
                 }
 
                 IBlockData iblockdata = this.getType(blockposition1);
@@ -489,7 +588,7 @@
             while (iterator.hasNext()) {
                 EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-                if (entityplayer.isSpectator()) {
+                if (entityplayer.isSpectator() || (entityplayer.fauxSleeping && !entityplayer.isSleeping())) { // CraftBukkit
                     ++i;
                 } else if (entityplayer.isSleeping()) {
                     ++j;
@@ -507,10 +606,22 @@
     }
 
     private void clearWeather() {
-        this.worldDataServer.setWeatherDuration(0);
+        // CraftBukkit start
         this.worldDataServer.setStorm(false);
-        this.worldDataServer.setThunderDuration(0);
+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+        // Not that everyone ever manages to get the whole server to sleep at the same time....
+        if (!this.worldDataServer.hasStorm()) {
+            this.worldDataServer.setWeatherDuration(0);
+        }
+        // CraftBukkit end
         this.worldDataServer.setThundering(false);
+        // CraftBukkit start
+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+        // Not that everyone ever manages to get the whole server to sleep at the same time....
+        if (!this.worldDataServer.isThundering()) {
+            this.worldDataServer.setThunderDuration(0);
+        }
+        // CraftBukkit end
     }
 
     public void resetEmptyTime() {
@@ -547,6 +658,7 @@
         });
         gameprofilerfiller.c("tickNonPassenger");
         entity.tick();
+        entity.postTick();
         this.getMethodProfiler().exit();
         Iterator iterator = entity.getPassengers().iterator();
 
@@ -572,6 +684,7 @@
                 });
                 gameprofilerfiller.c("tickPassenger");
                 entity1.passengerTick();
+                entity1.postTick();
                 gameprofilerfiller.exit();
                 Iterator iterator = entity1.getPassengers().iterator();
 
@@ -596,6 +709,7 @@
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
 
         if (!flag1) {
+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
             if (iprogressupdate != null) {
                 iprogressupdate.a(new ChatMessage("menu.savingLevel"));
             }
@@ -613,6 +727,13 @@
             }
 
         }
+        // CraftBukkit start - moved from MinecraftServer.saveChunks
+        WorldServer worldserver1 = this;
+
+        worldDataServer.a(worldserver1.getWorldBorder().t());
+        worldDataServer.setCustomBossEvents(this.server.getBossBattleCustomData().save());
+        convertable.a(this.server.customRegistry, this.worldDataServer, this.server.getPlayerList().save());
+        // CraftBukkit end
     }
 
     private void an() {
@@ -661,16 +782,31 @@
         return list.isEmpty() ? null : (EntityPlayer) list.get(this.random.nextInt(list.size()));
     }
 
+    public boolean addEntity(Entity entity) { return addFreshEntity(entity); } // CraftBukkit
+
     public boolean addFreshEntity(Entity entity) {
-        return this.addEntity0(entity);
+        // CraftBukkit start
+        return this.addEntity0(entity, CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    @Override
+    public boolean addEntity(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
+        return this.addEntity0(entity, reason);
+        // CraftBukkit end
     }
 
     public boolean addEntitySerialized(Entity entity) {
-        return this.addEntity0(entity);
+        // CraftBukkit start
+        return this.addEntitySerialized(entity, CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public boolean addEntitySerialized(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
+        return this.addEntity0(entity, reason);
+        // CraftBukkit end
     }
 
     public void addEntityTeleport(Entity entity) {
-        this.addEntity0(entity);
+        this.addEntity0(entity, CreatureSpawnEvent.SpawnReason.DEFAULT);
     }
 
     public void addPlayerCommand(EntityPlayer entityplayer) {
@@ -698,27 +834,34 @@
             this.removePlayer((EntityPlayer) entity, Entity.RemovalReason.DISCARDED);
         }
 
-        this.y.a((EntityAccess) entityplayer);
+        this.y.a(entityplayer); // CraftBukkit - decompile error
     }
 
-    private boolean addEntity0(Entity entity) {
+    // CraftBukkit start
+    private boolean addEntity0(Entity entity, CreatureSpawnEvent.SpawnReason spawnReason) {
         if (entity.cU()) {
-            WorldServer.LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.getName(entity.getEntityType()));
+            // WorldServer.LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.getName(entity.getEntityType())); // CraftBukkit
             return false;
         } else {
-            return this.y.a((EntityAccess) entity);
+            return this.y.a(entity, false, spawnReason, this);
         }
     }
 
     public boolean addAllEntitiesSafely(Entity entity) {
-        Stream stream = entity.cs().map(Entity::getUniqueID);
+        // CraftBukkit start
+        return this.addAllEntitiesSafely(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public boolean addAllEntitiesSafely(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        // CraftBukkit end
+        Stream<UUID> stream = entity.cs().map(Entity::getUniqueID); // CraftBukkit - decompile error
         PersistentEntitySectionManager persistententitysectionmanager = this.y;
 
         this.y.getClass();
         if (stream.anyMatch(persistententitysectionmanager::a)) {
             return false;
         } else {
-            this.addAllEntities(entity);
+            this.addAllEntities(entity, reason); // CraftBukkit
             return true;
         }
     }
@@ -731,10 +874,33 @@
         entityplayer.a(entity_removalreason);
     }
 
+    // CraftBukkit start
+    public boolean strikeLightning(Entity entitylightning) {
+        return this.strikeLightning(entitylightning, LightningStrikeEvent.Cause.UNKNOWN);
+    }
+
+    public boolean strikeLightning(Entity entitylightning, LightningStrikeEvent.Cause cause) {
+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) entitylightning.getBukkitEntity(), cause);
+        this.getServer().getPluginManager().callEvent(lightning);
+
+        if (lightning.isCancelled()) {
+            return false;
+        }
+
+        return this.addEntity(entitylightning);
+    }
+    // CraftBukkit end
+
     @Override
     public void a(int i, BlockPosition blockposition, int j) {
         Iterator iterator = this.server.getPlayerList().getPlayers().iterator();
 
+        // CraftBukkit start
+        EntityHuman entityhuman = null;
+        Entity entity = this.getEntity(i);
+        if (entity instanceof EntityHuman) entityhuman = (EntityHuman) entity;
+        // CraftBukkit end
+
         while (iterator.hasNext()) {
             EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
@@ -743,6 +909,12 @@
                 double d1 = (double) blockposition.getY() - entityplayer.locY();
                 double d2 = (double) blockposition.getZ() - entityplayer.locZ();
 
+                // CraftBukkit start
+                if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+                    continue;
+                }
+                // CraftBukkit end
+
                 if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
                     entityplayer.playerConnection.sendPacket(new PacketPlayOutBlockBreakAnimation(i, blockposition, j));
                 }
@@ -804,10 +976,20 @@
 
     @Override
     public Explosion createExplosion(@Nullable Entity entity, @Nullable DamageSource damagesource, @Nullable ExplosionDamageCalculator explosiondamagecalculator, double d0, double d1, double d2, float f, boolean flag, Explosion.Effect explosion_effect) {
+        // CraftBukkit start
+        Explosion explosion = super.createExplosion(entity, damagesource, explosiondamagecalculator, d0, d1, d2, f, flag, explosion_effect);
+
+        if (explosion.wasCanceled) {
+            return explosion;
+        }
+
+        /* Remove
         Explosion explosion = new Explosion(this, entity, damagesource, explosiondamagecalculator, d0, d1, d2, f, flag, explosion_effect);
 
         explosion.a();
         explosion.a(false);
+        */
+        // CraftBukkit end - TODO: Check if explosions are still properly implemented
         if (explosion_effect == Explosion.Effect.NONE) {
             explosion.clearBlocks();
         }
@@ -872,13 +1054,20 @@
     }
 
     public <T extends ParticleParam> int a(T t0, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6) {
-        PacketPlayOutWorldParticles packetplayoutworldparticles = new PacketPlayOutWorldParticles(t0, false, d0, d1, d2, (float) d3, (float) d4, (float) d5, (float) d6, i);
+        // CraftBukkit - visibility api support
+        return sendParticles(null, t0, d0, d1, d2, i, d3, d4, d5, d6, false);
+    }
+
+    public <T extends ParticleParam> int sendParticles(EntityPlayer sender, T t0, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6, boolean force) {
+        PacketPlayOutWorldParticles packetplayoutworldparticles = new PacketPlayOutWorldParticles(t0, force, d0, d1, d2, (float) d3, (float) d4, (float) d5, (float) d6, i);
+        // CraftBukkit end
         int j = 0;
 
         for (int k = 0; k < this.players.size(); ++k) {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(k);
+            if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
 
-            if (this.a(entityplayer, false, d0, d1, d2, packetplayoutworldparticles)) {
+            if (this.a(entityplayer, force, d0, d1, d2, packetplayoutworldparticles)) { // CraftBukkit
                 ++j;
             }
         }
@@ -928,7 +1117,7 @@
 
     @Nullable
     public BlockPosition a(StructureGenerator<?> structuregenerator, BlockPosition blockposition, int i, boolean flag) {
-        return !this.server.getSaveData().getGeneratorSettings().shouldGenerateMapFeatures() ? null : this.getChunkProvider().getChunkGenerator().findNearestMapFeature(this, structuregenerator, blockposition, i, flag);
+        return !this.worldDataServer.getGeneratorSettings().shouldGenerateMapFeatures() ? null : this.getChunkProvider().getChunkGenerator().findNearestMapFeature(this, structuregenerator, blockposition, i, flag); // CraftBukkit
     }
 
     @Nullable
@@ -965,7 +1154,14 @@
     @Nullable
     @Override
     public WorldMap a(String s) {
-        return (WorldMap) this.getMinecraftServer().E().getWorldPersistentData().a(WorldMap::b, s);
+        // CraftBukkit start
+        // We only get here when the data file exists, but is not a valid map
+        WorldMap map = this.getMinecraftServer().E().getWorldPersistentData().a(WorldMap::b, s);
+        if (map == null) return null;
+        MapInitializeEvent event = new MapInitializeEvent(map.mapView);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        return map;
+        // CraftBukkit end
     }
 
     @Override
@@ -1299,6 +1495,11 @@
     @Override
     public void update(BlockPosition blockposition, Block block) {
         if (!this.isDebugWorld()) {
+            // CraftBukkit start
+            if (populating) {
+                return;
+            }
+            // CraftBukkit end
             this.applyPhysics(blockposition, block);
         }
 
@@ -1313,12 +1514,12 @@
     }
 
     public boolean isFlatWorld() {
-        return this.server.getSaveData().getGeneratorSettings().isFlatWorld();
+        return this.worldDataServer.getGeneratorSettings().isFlatWorld(); // CraftBukkit
     }
 
     @Override
     public long getSeed() {
-        return this.server.getSaveData().getGeneratorSettings().getSeed();
+        return this.worldDataServer.getGeneratorSettings().getSeed(); // CraftBukkit
     }
 
     @Nullable
@@ -1346,7 +1547,7 @@
     private static <T> String a(Iterable<T> iterable, Function<T, String> function) {
         try {
             Object2IntOpenHashMap<String> object2intopenhashmap = new Object2IntOpenHashMap();
-            Iterator iterator = iterable.iterator();
+            Iterator<T> iterator = iterable.iterator(); // CraftBukkit - decompile error
 
             while (iterator.hasNext()) {
                 T t0 = iterator.next();
@@ -1355,7 +1556,7 @@
                 object2intopenhashmap.addTo(s, 1);
             }
 
-            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> {
+            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry<String>::getIntValue).reversed()).limit(5L).map((entry) -> { // CraftBukkit - decompile error
                 return (String) entry.getKey() + ":" + entry.getIntValue();
             }).collect(Collectors.joining(","));
         } catch (Exception exception) {
@@ -1364,17 +1565,33 @@
     }
 
     public static void a(WorldServer worldserver) {
+        // CraftBukkit start
+        WorldServer.a(worldserver, null);
+    }
+
+    public static void a(WorldServer worldserver, Entity entity) {
+        // CraftBukkit end
         BlockPosition blockposition = WorldServer.a;
         int i = blockposition.getX();
         int j = blockposition.getY() - 2;
         int k = blockposition.getZ();
 
+        // CraftBukkit start
+        org.bukkit.craftbukkit.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.util.BlockStateListPopulator(worldserver);
         BlockPosition.b(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((blockposition1) -> {
-            worldserver.setTypeUpdate(blockposition1, Blocks.AIR.getBlockData());
+            blockList.setTypeAndData(blockposition1, Blocks.AIR.getBlockData(), 3);
         });
         BlockPosition.b(i - 2, j, k - 2, i + 2, j, k + 2).forEach((blockposition1) -> {
-            worldserver.setTypeUpdate(blockposition1, Blocks.OBSIDIAN.getBlockData());
+            blockList.setTypeAndData(blockposition1, Blocks.OBSIDIAN.getBlockData(), 3);
         });
+        org.bukkit.World bworld = worldserver.getWorld();
+        org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
+
+        worldserver.getServer().getPluginManager().callEvent(portalEvent);
+        if (!portalEvent.isCancelled()) {
+            blockList.updateList();
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -1454,6 +1671,7 @@
             if (entity instanceof EntityInsentient) {
                 WorldServer.this.navigators.remove(entity);
             }
+            entity.valid = false; // CraftBukkit
 
             if (entity instanceof EntityEnderDragon) {
                 EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).fb();
